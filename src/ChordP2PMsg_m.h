//
// Generated file, do not edit! Created by nedtool 5.0 from ChordP2PMsg.msg.
//

#ifndef __CHORDP2PMSG_M_H
#define __CHORDP2PMSG_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0500
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>ChordP2PMsg.msg:19</tt> by nedtool.
 * <pre>
 * // packet formats for the request and response of the lookup method used by clients
 * // when they lookup a key on a DHT node
 * packet Lookup_Req
 * {
 *     long key;		// lookup key
 *     string sender;		// sender
 * }
 * </pre>
 */
class Lookup_Req : public ::omnetpp::cPacket
{
  protected:
    long key;
    omnetpp::opp_string sender;

  private:
    void copy(const Lookup_Req& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Lookup_Req&);

  public:
    Lookup_Req(const char *name=nullptr, int kind=0);
    Lookup_Req(const Lookup_Req& other);
    virtual ~Lookup_Req();
    Lookup_Req& operator=(const Lookup_Req& other);
    virtual Lookup_Req *dup() const {return new Lookup_Req(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual long getKey() const;
    virtual void setKey(long key);
    virtual const char * getSender() const;
    virtual void setSender(const char * sender);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Lookup_Req& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Lookup_Req& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>ChordP2PMsg.msg:25</tt> by nedtool.
 * <pre>
 * packet Lookup_Resp
 * {
 *     long key;		// lookup key
 *     string sender;		// id of the sender
 *     string responder[];	// list of chord nodes 
 * }
 * </pre>
 */
class Lookup_Resp : public ::omnetpp::cPacket
{
  protected:
    long key;
    omnetpp::opp_string sender;
    omnetpp::opp_string *responder; // array ptr
    unsigned int responder_arraysize;

  private:
    void copy(const Lookup_Resp& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Lookup_Resp&);

  public:
    Lookup_Resp(const char *name=nullptr, int kind=0);
    Lookup_Resp(const Lookup_Resp& other);
    virtual ~Lookup_Resp();
    Lookup_Resp& operator=(const Lookup_Resp& other);
    virtual Lookup_Resp *dup() const {return new Lookup_Resp(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual long getKey() const;
    virtual void setKey(long key);
    virtual const char * getSender() const;
    virtual void setSender(const char * sender);
    virtual void setResponderArraySize(unsigned int size);
    virtual unsigned int getResponderArraySize() const;
    virtual const char * getResponder(unsigned int k) const;
    virtual void setResponder(unsigned int k, const char * responder);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Lookup_Resp& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Lookup_Resp& obj) {obj.parsimUnpack(b);}


#endif // ifndef __CHORDP2PMSG_M_H

